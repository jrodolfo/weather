//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.05.15 at 12:39:23 PM ADT 
//


package com.jrodolfo.weather.model.jaxbgenerated.site;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for dateStampNameType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="dateStampNameType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="observation"/>
 *     &lt;enumeration value="xmlCreation"/>
 *     &lt;enumeration value="forecastIssue"/>
 *     &lt;enumeration value="eventIssue"/>
 *     &lt;enumeration value="sunrise"/>
 *     &lt;enumeration value="sunset"/>
 *     &lt;enumeration value="moonrise"/>
 *     &lt;enumeration value="moonset"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "dateStampNameType")
@XmlEnum
public enum DateStampNameType {

    @XmlEnumValue("observation")
    OBSERVATION("observation"),
    @XmlEnumValue("xmlCreation")
    XML_CREATION("xmlCreation"),
    @XmlEnumValue("forecastIssue")
    FORECAST_ISSUE("forecastIssue"),
    @XmlEnumValue("eventIssue")
    EVENT_ISSUE("eventIssue"),
    @XmlEnumValue("sunrise")
    SUNRISE("sunrise"),
    @XmlEnumValue("sunset")
    SUNSET("sunset"),
    @XmlEnumValue("moonrise")
    MOONRISE("moonrise"),
    @XmlEnumValue("moonset")
    MOONSET("moonset");
    private final String value;

    DateStampNameType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DateStampNameType fromValue(String v) {
        for (DateStampNameType c: DateStampNameType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
